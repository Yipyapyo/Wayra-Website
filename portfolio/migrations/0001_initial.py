# Generated by Django 4.1.2 on 2023-02-25 01:26

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
import portfolio.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=60,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Company name must consist of three to sixty characters",
                                regex="^[a-zA-Z0-9 ,]{3,}$",
                            )
                        ],
                    ),
                ),
                (
                    "company_registration_number",
                    models.CharField(
                        default="00000000",
                        max_length=8,
                        validators=[django.core.validators.MinLengthValidator(8)],
                        verbose_name="Company Registration Number",
                    ),
                ),
                (
                    "trading_names",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Company name must consist of three to sixty characters",
                                regex="^[a-zA-Z0-9 ,]{3,}$",
                            )
                        ],
                    ),
                ),
                (
                    "previous_names",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Company name must consist of three to sixty characters",
                                regex="^[a-zA-Z0-9 ,]{3,}$",
                            )
                        ],
                    ),
                ),
                (
                    "registered_address",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Registered Address"
                    ),
                ),
                (
                    "jurisdiction",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Jurisdiction"
                    ),
                ),
                ("incorporation_date", models.DateField(auto_now=True)),
                ("is_archived", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Individual",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                ("AngelListLink", models.URLField(verbose_name="Angellist link")),
                ("CrunchbaseLink", models.URLField(verbose_name="Crunchbase link")),
                ("LinkedInLink", models.URLField(verbose_name="Linkedin link")),
                ("Company", models.CharField(max_length=100, verbose_name="Company")),
                (
                    "Position",
                    models.CharField(max_length=100, verbose_name="Company position"),
                ),
                ("Email", models.EmailField(max_length=254)),
                (
                    "PrimaryNumber",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None, verbose_name="Primary phone number"
                    ),
                ),
                (
                    "SecondaryNumber",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=128,
                        region=None,
                        verbose_name="Secondary phone number",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Founder",
            fields=[
                (
                    "individual_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="portfolio.individual",
                    ),
                ),
                ("companyFounded", models.CharField(default="startup", max_length=100)),
                ("additionalInformation", models.CharField(blank=True, max_length=500)),
            ],
            bases=("portfolio.individual",),
        ),
        migrations.CreateModel(
            name="InvestorIndividual",
            fields=[
                (
                    "individual_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="portfolio.individual",
                    ),
                ),
                ("NumberOfPortfolioCompanies", models.PositiveIntegerField()),
                ("NumberOfPersonalInvestments", models.PositiveIntegerField()),
                ("NumberOfPartnerInvestments", models.PositiveIntegerField()),
                ("PartOfIncubator", models.BooleanField()),
                ("NumberOfExits", models.PositiveIntegerField()),
            ],
            bases=("portfolio.individual",),
        ),
        migrations.CreateModel(
            name="Portfolio_Company",
            fields=[
                (
                    "company_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="portfolio.company",
                    ),
                ),
                ("wayra_number", models.CharField(max_length=255)),
            ],
            bases=("portfolio.company",),
        ),
        migrations.CreateModel(
            name="ResidentialAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address_line1",
                    models.CharField(max_length=50, verbose_name="Address line 1"),
                ),
                (
                    "address_line2",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Address line 2"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(max_length=10, verbose_name="Postal code"),
                ),
                ("city", models.CharField(max_length=50, verbose_name="City")),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="State/Province"
                    ),
                ),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "individual",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portfolio.individual",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PastExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("companyName", models.CharField(max_length=100)),
                ("workTitle", models.CharField(max_length=100)),
                ("start_year", models.PositiveSmallIntegerField()),
                ("end_year", models.PositiveSmallIntegerField(blank=True)),
                ("duration", models.CharField(default="present", max_length=50)),
                ("Description", models.CharField(blank=True, max_length=500)),
                (
                    "individual",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portfolio.individual",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=255,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email address",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("phone", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", portfolio.models.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="InvestorCompany",
            fields=[
                (
                    "company_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="portfolio.company",
                    ),
                ),
                ("AngelListLink", models.URLField(verbose_name="Angellist link")),
                ("CrunchbaseLink", models.URLField(verbose_name="Crunchbase link")),
                ("LinkedInLink", models.URLField(verbose_name="Linkedin link")),
                (
                    "Type",
                    models.CharField(
                        choices=[
                            ("VENTURE_CAPITAL", "Venture Capital"),
                            ("PRIVATE_EQUITY_FIRM", "Private Equity Firm"),
                            ("ACCELERATOR", "Accelerator"),
                            ("INVESTMENT_PARTNER", "Investment Partner"),
                            ("CORPORATE_VENTURE_CAPITAL", "Corporate Venture Capital"),
                            ("MICRO_VC", "Micro VC"),
                            ("ANGEL_GROUP", "Angel Group"),
                            ("INCUBATOR", "Incubator"),
                            ("INVESTMENT_BANK", "Investment Bank"),
                            ("FAMILY_INVESTMENT_OFFICE", "Family Investment Office"),
                            ("VENTURE_DEBT", "Venture Debt"),
                            ("CO_WORKING_SPACE", "Co-Working Space"),
                            ("FUND_OF_FUNDS", "Fund Of Funds"),
                            ("HEDGE_FUND", "Hedge Fund"),
                            ("GOVERNMENT_OFFICE", "Government Office"),
                            ("UNIVERSITY_PROGRAM", "University Program"),
                            ("ENTREPRENEURSHIP_PROGRAM", "Entrepreneurship Program"),
                            ("SECONDARY_PURCHASER", "Secondary Purchaser"),
                            ("STARTUP_COMPETITION", "Startup Competition"),
                            ("SYNDICATE", "Syndicate"),
                            ("PENSION_FUNDS", " Pension Funds"),
                        ],
                        default="VC",
                        max_length=50,
                    ),
                ),
                ("NumberOfInvestments", models.PositiveIntegerField()),
                ("NumberOfLeadInvestments", models.PositiveIntegerField()),
                ("NumberOfDiversityInvestments", models.PositiveIntegerField()),
                ("NumberOfExits", models.PositiveIntegerField()),
                (
                    "InvestedCompanies",
                    models.ManyToManyField(
                        related_name="companies", to="portfolio.company"
                    ),
                ),
            ],
            bases=("portfolio.company",),
        ),
        migrations.CreateModel(
            name="Investment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "typeOfFoundingRounds",
                    models.CharField(
                        choices=[
                            ("Seed round", "Seed round"),
                            ("Series A", "Series A"),
                            ("Series B", "Series B"),
                            ("Series C", "Series C"),
                            ("Coporate round", "Coporate round"),
                            ("Convertible note", "Convertible note"),
                            ("Venture round", "Venture round"),
                            ("Debt financing", "Debt financing"),
                            ("Post-IPO Equity", "Post-IPO Equity"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "moneyRaised",
                    models.DecimalField(
                        decimal_places=2, max_digits=5, verbose_name="In millions"
                    ),
                ),
                (
                    "dateInvested",
                    models.DateTimeField(
                        auto_now=True,
                        validators=[
                            django.core.validators.MaxValueValidator(
                                limit_value=django.utils.timezone.now
                            )
                        ],
                    ),
                ),
                (
                    "individualInvestor",
                    models.ManyToManyField(
                        related_name="IndividualInvestor",
                        to="portfolio.investorindividual",
                    ),
                ),
                (
                    "investor",
                    models.ManyToManyField(
                        related_name="investor", to="portfolio.investorcompany"
                    ),
                ),
                (
                    "startup",
                    models.ManyToManyField(
                        related_name="startup", to="portfolio.portfolio_company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Programme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "cohort",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="cohort has to be at least 1"
                            )
                        ]
                    ),
                ),
                ("coaches_mentors", models.ManyToManyField(to="portfolio.individual")),
                (
                    "partners",
                    models.ManyToManyField(
                        related_name="partners", to="portfolio.company"
                    ),
                ),
                (
                    "participants",
                    models.ManyToManyField(
                        related_name="participants", to="portfolio.portfolio_company"
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "cohort")},
            },
        ),
    ]
