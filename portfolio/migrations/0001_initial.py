# Generated by Django 4.1.2 on 2023-02-18 18:29

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
import portfolio.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=60,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Company name must consist of three to sixty characters",
                                regex="^[a-zA-Z0-9 ]{3,}$",
                            )
                        ],
                    ),
                ),
                (
                    "company_registration_number",
                    models.CharField(
                        default="00000000",
                        max_length=8,
                        validators=[django.core.validators.MinLengthValidator(8)],
                        verbose_name="Company Registration Number",
                    ),
                ),
                (
                    "trading_names",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Company name must consist of three to sixty characters",
                                regex="^[a-zA-Z0-9 ]{3,}$",
                            )
                        ],
                    ),
                ),
                (
                    "previous_names",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Company name must consist of three to sixty characters",
                                regex="^[a-zA-Z0-9 ]{3,}$",
                            )
                        ],
                    ),
                ),
                (
                    "registered_address",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Registered Address"
                    ),
                ),
                (
                    "jurisdiction",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Jurisdiction"
                    ),
                ),
                ("incorporation_date", models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Individual",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("AngelListLink", models.URLField(verbose_name="Angellist link")),
                ("CrunchbaseLink", models.URLField(verbose_name="Crunchbase link")),
                ("LinkedInLink", models.URLField(verbose_name="Linkedin link")),
                ("Company", models.CharField(max_length=100, verbose_name="Company")),
                (
                    "Position",
                    models.CharField(max_length=100, verbose_name="Company position"),
                ),
                ("Email", models.EmailField(max_length=254)),
                (
                    "PrimaryNumber",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None, verbose_name="Primary phone number"
                    ),
                ),
                (
                    "SecondaryNumber",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=128,
                        region=None,
                        verbose_name="Secondary phone number",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ResidentialAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address_line1",
                    models.CharField(max_length=50, verbose_name="Address line 1"),
                ),
                (
                    "address_line2",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Address line 2"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(max_length=10, verbose_name="Postal code"),
                ),
                ("city", models.CharField(max_length=50, verbose_name="City")),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="State/Province"
                    ),
                ),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "individual",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portfolio.individual",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="pastExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("companyName", models.CharField(max_length=100)),
                ("workTitle", models.CharField(max_length=100)),
                ("start_year", models.PositiveSmallIntegerField()),
                ("end_year", models.PositiveSmallIntegerField(blank=True)),
                ("duration", models.CharField(default="present", max_length=50)),
                ("Description", models.CharField(blank=True, max_length=500)),
                (
                    "ndividual",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portfolio.individual",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=255,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email address",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("phone", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", portfolio.manager.UserManager()),
            ],
        ),
    ]
